name: Deploy Azure APP using Terraform

on:
  workflow_dispatch:

jobs:
  DeployInfra:
    name: Deploy Infra by Using Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform binary
        uses: actions/cache@v3
        with:
          path: /usr/bin/terraform
          key: terraform-cache-${{ runner.os }}-${{ hashFiles('**/terraform') }}
          restore-keys: |
            terraform-cache-${{ runner.os }}-

      - name: Install Terraform
        if: false
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt install -y terraform
          terraform -v
     
      - name: Update Terraform Setup
        if: false
        working-directory: Terraform 
        run: |
           sed -i "s|{tmp_subscription_id}|${{ secrets.SUBSCRIPTION_ID }}|g" variables.tfvars
           sed -i "s|{tmp_tenant_id}|${{ secrets.TENANT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_id}|${{ secrets.SP_CLIENT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_secret}|${{ secrets.SP_CLIENT_SECRET }}|g" variables.tfvars

           sed -i "s|{tmp_resource_group_name}|${{ secrets.RESOURCE_GROUP_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_resource_group_location}|${{ secrets.RESOURCE_GROUP_LOCATION }}|g" variables.tfvars

           sed -i "s|{tmp_db_server_name}|${{ secrets.DB_SERVER_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" variables.tfvars
           sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" variables.tfvars

           sed -i "s|{tmp_db_name}|${{ secrets.DB_NAME }}|g" variables.tfvars


      - name: Start Terraform Deploy
        if: false
        working-directory: Terraform
        run: |
          terraform init
          terraform plan -var-file=variables.tfvars
          terraform apply -auto-approve -var-file=variables.tfvars

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          run: pip install -r requirements.txt

      - name: Create Table In Sql Server 
        working-directory: database
        run: |
          pip install pyodbc
          sed -i "s|{tmp_db_server_name}|${{ secrets.DB_SERVER_NAME }}|g" createTable.py
          sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" createTable.py
          sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" createTable.py
          sed -i "s|{tmp_db_name}|${{ secrets.DB_NAME }}|g" createTable.py
          python createTable.py

      - name: Check Table In Sql Server
        working-directory: database
        run: |
          pip install pyodbc
          sed -i "s|{tmp_db_server_name}|${{ secrets.DB_SERVER_NAME }}|g" checkTabelCreation.py
          sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" checkTabelCreation.py
          sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" checkTabelCreation.py
          sed -i "s|{tmp_db_name}|${{ secrets.DB_NAME }}|g" checkTabelCreation.py
          python checkTabelCreation.py 
