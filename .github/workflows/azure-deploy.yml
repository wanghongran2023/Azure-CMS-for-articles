name: Infra Construction And App Deploy

on:
  workflow_dispatch:

jobs:
  DeployInfraAndBuild:
    name: Deploy Infra and Build
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform binary
        uses: actions/cache@v3
        with:
          path: /usr/bin/terraform
          key: terraform-cache-${{ runner.os }}-${{ hashFiles('**/terraform') }}
          restore-keys: |
            terraform-cache-${{ runner.os }}-

      - name: Install Terraform
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y gnupg software-properties-common curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt install -y terraform
          terraform -v
     
      - name: Update Terraform Setup
        working-directory: Terraform 
        run: |
           sed -i "s|{tmp_subscription_id}|${{ secrets.SUBSCRIPTION_ID }}|g" variables.tfvars
           sed -i "s|{tmp_tenant_id}|${{ secrets.TENANT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_id}|${{ secrets.SP_CLIENT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_secret}|${{ secrets.SP_CLIENT_SECRET }}|g" variables.tfvars

           sed -i "s|{tmp_resource_group_name}|${{ secrets.RESOURCE_GROUP_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_resource_group_location}|${{ secrets.RESOURCE_GROUP_LOCATION }}|g" variables.tfvars

           sed -i "s|{tmp_db_server_name}|${{ secrets.DB_SERVER_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" variables.tfvars
           sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" variables.tfvars

           sed -i "s|{tmp_db_name}|${{ secrets.DB_NAME }}|g" variables.tfvars

           sed -i "s|{tmp_storage_account_name}|${{ secrets.STORAGE_ACCOUNT }}|g" variables.tfvars
           sed -i "s|{tmp_storage_container_name}|${{ secrets.STORAGE_CONTAINER }}|g" variables.tfvars

           sed -i "s|{tmp_app_config_name}|${{ secrets.APP_NAME }}|g" variables.tfvars

           sed -i "s|{tmp_github_token}|${{ secrets.MY_GITHUB_TOKEN }}|g" variables.tfvars


      - name: Start Terraform Deploy
        working-directory: Terraform
        run: |
          terraform init
          terraform plan -var-file=variables.tfvars
          terraform apply -auto-approve -var-file=variables.tfvars
             
      - name: Update Parameter in APP Config
        run: |
          sed -i "s|{tmp_client_secret_key}|${{ secrets.SP_CLIENT_SECRET_KEY }}|g" config.py
          sed -i "s|{tmp_db_server_name}|${{ secrets.DB_SERVER_NAME }}|g" config.py
          sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" config.py
          sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" config.py
          sed -i "s|{tmp_db_name}|${{ secrets.DB_NAME }}|g" config.py

          cd Terraform
          echo "STORAGE_KEY=$(terraform output -raw storage_key)" >> ../env_vars.sh
          cd ..
          source env_vars.sh
          sed -i "s|{tmp_storage_account_name}|${{ secrets.STORAGE_ACCOUNT }}|g" config.py
          sed -i "s|{tmp_storage_container_name}|${{ secrets.STORAGE_CONTAINER }}|g" config.py
          sed -i "s|{tmp_storage_key}|$STORAGE_KEY|g" config.py

          sed -i "s|{tmp_sp_client_id}|${{ secrets.SP_CLIENT_ID }}|g" config.py
          sed -i "s|{tmp_sp_client_secret}|${{ secrets.SP_CLIENT_SECRET }}|g" config.py
          cat config.py

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  InitDatabase:
    name: Create Table and Add Data to Database
    needs: DeployInfraAndBuild
    runs-on: ubuntu-latest                     
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Set up ODBC Driver 18 for SQL Server
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          sudo apt-get install -y unixodbc-dev

      - name: Create Table In Sql Server
        working-directory: database
        run: |
          pip install pyodbc
          sed -i "s|{tmp_db_server_name}|${{ secrets.DB_SERVER_NAME }}|g" createTable.py
          sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" createTable.py
          sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" createTable.py
          sed -i "s|{tmp_db_name}|${{ secrets.DB_NAME }}|g" createTable.py
          python createTable.py

      - name: Check Table In Sql Server
        working-directory: database
        run: |
          pip install pyodbc
          sed -i "s|{tmp_db_server_name}|${{ secrets.DB_SERVER_NAME }}|g" checkTabelCreation.py
          sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" checkTabelCreation.py
          sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" checkTabelCreation.py
          sed -i "s|{tmp_db_name}|${{ secrets.DB_NAME }}|g" checkTabelCreation.py
          python checkTabelCreation.py

  DeployApp:
    runs-on: ubuntu-latest
    needs: InitDatabase
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SP_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.SP_CLIENT_SECRET }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: ${{ secrets.APP_NAME }}
          resource-group: ${{ secrets.RESOURCE_GROUP_NAME }}
          slot-name: 'Production'
          startup-command: './start.sh'
